{
	"info": {
		"_postman_id": "06206c4c-9992-439e-a096-f4cab518eb8f",
		"name": "API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32318037",
		"_collection_link": "https://api-bootcamp-0190.postman.co/workspace/user-api~471d4303-50a0-4650-8b77-b9ac1d5876e1/collection/32318037-06206c4c-9992-439e-a096-f4cab518eb8f?action=share&source=collection_link&creator=32318037"
	},
	"item": [
		{
			"name": "create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Validate Status Code ----",
							"pm.test(\"Status code is 201 or 400 or 409\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400,409,201]); // Check if status is 200 OK or 400 Bad Request or 409 conflict",
							"});",
							"",
							"// ---- Validate Status Text ----",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Status line is HTTP/1.1 201 OK\", function () {",
							"        pm.response.to.have.status('OK');",
							"    });",
							"} else if (pm.response.code === 400) {",
							"    pm.test(\"Status text contains Bad Request\", function () {",
							"        pm.expect(pm.response.status).to.eql(\"Bad Request\");",
							"    });",
							"    ",
							"}",
							"",
							"// ---- Validate Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"pm.test(\"Server header is present\", function () {",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"// ---- JSON Schema Validation for 200 OK ----",
							"if (pm.response.code === 201) {",
							"    const successSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"user_id\": { \"type\": \"integer\" },",
							"            \"user_first_name\": { \"type\": \"string\" },",
							"            \"user_last_name\": { \"type\": \"string\" },",
							"            \"user_contact_number\": { \"type\": \"integer\" },",
							"            \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },",
							"            \"userAddress\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"addressId\": { \"type\": \"integer\" },",
							"                    \"plotNumber\": { \"type\": \"string\" },",
							"                    \"street\": { \"type\": \"string\" },",
							"                    \"state\": { \"type\": \"string\" },",
							"                    \"country\": { \"type\": \"string\" },",
							"                    \"zipCode\": { \"type\": \"integer\" }",
							"                },",
							"                \"required\": [\"addressId\", \"plotNumber\", \"street\", \"state\", \"country\", \"zipCode\"]",
							"            },",
							"            \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"            \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }",
							"        },",
							"        \"required\": [\"user_id\", \"user_first_name\", \"user_last_name\", \"user_contact_number\", \"user_email_id\", \"userAddress\", \"creation_time\", \"last_mod_time\"]",
							"    };",
							"",
							"    pm.test(\"Response matches success schema\", function () {",
							"        pm.response.to.have.jsonSchema(successSchema);",
							"    });",
							"",
							"    // ---- Dynamic Field Validations for 200 OK ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"    // Validate against dynamic data from the collection or environment",
							" ",
							"",
							"    pm.test(\"First name matches expected\", function () {",
							"        pm.expect(jsonData.user_first_name).to.eql(pm.iterationData.get(\"user_first_name\") || pm.environment.get(\"user_first_name\"));",
							"    });",
							"",
							"    pm.test(\"Last name matches expected\", function () {",
							"        pm.expect(jsonData.user_last_name).to.eql(pm.iterationData.get(\"user_last_name\") || pm.environment.get(\"user_last_name\"));",
							"    });",
							"",
							"    pm.test(\"Email matches expected\", function () {",
							"        pm.expect(jsonData.user_email_id).to.eql(pm.iterationData.get(\"user_email_id\") || pm.environment.get(\"user_email_id\"));",
							"    });",
							"",
							"    pm.test(\"Contact number matches expected\", function () {",
							"        pm.expect(jsonData.user_contact_number).to.eql(pm.iterationData.get(\"user_contact_number\") || pm.environment.get(\"user_contact_number\"));",
							"    });",
							"",
							"    pm.test(\"Address zip code matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.zipCode).to.eql(pm.iterationData.get(\"zipCode\") || pm.environment.get(\"zipCode\"));",
							"    });",
							"",
							"    pm.test(\"Address state matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.state).to.eql(pm.iterationData.get(\"state\") || pm.environment.get(\"state\"));",
							"    });",
							"",
							"    pm.test(\"Country matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.country).to.eql(pm.iterationData.get(\"country\") || pm.environment.get(\"country\"));",
							"    });",
							"",
							"} else if (pm.response.code === 400) {",
							"    // ---- JSON Schema Validation for 400 Bad Request ----",
							"    const errorSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"status\": { \"type\": \"string\" },",
							"            \"message\": { \"type\": \"string\" }",
							"        },",
							"        \"required\": [\"status\", \"message\"]",
							"    };",
							"",
							"    pm.test(\"Response matches error schema\", function () {",
							"        pm.response.to.have.jsonSchema(errorSchema);",
							"    });",
							"",
							"    // ---- Error Message Validation for Bad Request ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"",
							"    // Validate that the correct error message is returned based on the response",
							"pm.test(\"Error message is correct \"+ jsonData.message, function () {",
							"    if (jsonData.message === \"UUser already exist with same email id\") {",
							"        pm.expect(jsonData.message).to.eql(\"User already exist with same email id\");",
							"    } else if (jsonData.message === \"User already exist with same contact number\") {",
							"        pm.expect(jsonData.message).to.eql(\"User already exist with same contact number\");",
							"    }",
							"    else if (jsonData.message === \"user FirstName is mandatory and should contains alphabets only\"){",
							"        pm.expect(jsonData.message).to.eql(\"user FirstName is mandatory and should contains alphabets only\");",
							" }",
							"    else if (jsonData.message === \"User Last Name is mandatory and should contains alphabets only\"){",
							"        pm.expect(jsonData.message).to.eql(\"User Last Name is mandatory and should contains alphabets only\");",
							"        }",
							"    else if (jsonData.message === \"Plot number should contain alphaNumeric values only\"){",
							"        pm.expect(jsonData.message).to.eql(\"Plot number should contain alphaNumeric values only\");",
							"",
							"    }  ",
							"    else {",
							"        pm.expect.fail(\"Unexpected error message: \" + jsonData.message);",
							"    }",
							"});",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define Username and Password for Authorization (Basic Auth) ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 for Basic Auth ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Generate Random Data for New Resource ----",
							"var uuid = require('uuid');  // Using Postman's built-in UUID generator",
							"var newUserId = uuid.v4();   // Create a unique ID for the new resource",
							"pm.environment.set('new_user_id', newUserId);  // Save new user ID in the environment",
							"",
							"// ---- Generate Current Timestamp ----",
							"var moment = require('moment');",
							"var creationTime = moment().format('YYYY-MM-DDTHH:mm:ssZ');  // Format as ISO timestamp",
							"pm.environment.set('creation_time', creationTime);  // Store the timestamp for later use",
							"",
							"// ---- Set Dynamic Request Body (for POST/Create) ----",
							"const requestBody = {",
							"    \"user_id\": newUserId,",
							"    \"user_first_name\": \"gfhfh\",  // You can modify this with dynamic data",
							"    \"user_last_name\": \"rytuyt\",",
							"    \"user_email_id\": \"bcvbd@gmail.com\" + Math.random().toString(36).substring(7) + \"@example.com\",  // Generate a random email",
							"    \"user_contact_number\": \"6546546555\",  // Replace with dynamic or test data",
							"    \"userAddress\": {",
							"        \"plotNumber\": \"tr-98\",",
							"        \"street\": \"hg \",",
							"        \"state\": \"tr\",",
							"        \"country\": \"usa\",",
							"        \"zipCode\": \"4546\"",
							"    },",
							"    \"creation_time\": creationTime,  // Set the generated timestamp",
							"    \"last_mod_time\": creationTime   // Set last modification time (initially same as creation)",
							"};",
							"",
							"// ---- Save Request Body to Environment Variable ----",
							"pm.environment.set('create_request_body', JSON.stringify(requestBody));",
							"",
							"// ---- Logging for Debugging ----",
							"console.log(\"Authorization Header:\", \"Basic \" + encodedCredentials);",
							"console.log(\"Generated New User ID:\", newUserId);",
							"console.log(\"Request Body:\", JSON.stringify(requestBody));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userAddress\": {\n        \"plotNumber\": \"{{plotNumber}}\",\n        \"street\": \"{{street}}\",\n        \"state\": \"{{state}}\",\n        \"country\": \"{{country}}\",\n        \"zipCode\": {{zipCode}}\n    },\n    \"user_first_name\": \"{{user_first_name}}\",\n    \"user_last_name\": \"{{user_last_name}}\",\n    \"user_contact_number\": \"{{user_contact_number}}\",\n    \"user_email_id\": \"{{user_email_id}}\",\n    \"creation_time\": \"{{creation_time}}\",\n    \"last_mod_time\": \"{{last_mod_time}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https:///{{Base_url}}/uap/createusers",
					"protocol": "https",
					"path": [
						"{{Base_url}}",
						"uap",
						"createusers"
					]
				},
				"description": "Generated from cURL: curl -X POST \"https://userserviceapp-f5a54828541b.herokuapp.com/uap/createusers\" -H \"accept: */*\" -H \"Content-Type: application/json\" -d \"{ \\\"userAddress\\\": { \\\"addressId\\\": 7890, \\\"plotNumber\\\": \\\"90\\\", \\\"street\\\": \\\"Minerva\\\", \\\"state\\\": \\\"NY\\\", \\\"country\\\": \\\"usa\\\", \\\"zipCode\\\": 00001 }, \\\"user_id\\\": 0, \\\"user_first_name\\\": \\\"Anu\\\", \\\"user_last_name\\\": \\\"Yak\\\", \\\"user_contact_number\\\": 1234556689, \\\"user_email_id\\\": \\\"rvenna@gmail.com\\\", \\\"creation_time\\\": \\\"2024-10-12T23:14:11.948+00:00\\\", \\\"last_mod_time\\\": \\\"2024-10-11T19:51:02.742+00:00\\\"}\""
			},
			"response": []
		},
		{
			"name": "getAll",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//---- Validate Status Code ----",
							"pm.test(\"Status code is 200 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]); // Check if status is 200 OK or 400 Bad Request",
							"});",
							"",
							"// ---- Validate Status Text ----",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Status line is HTTP/1.1 200 OK\", function () {",
							"        pm.response.to.have.status('OK');",
							"    });",
							"} else if (pm.response.code === 400) {",
							"    pm.test(\"Status text contains Bad Request\", function () {",
							"        pm.expect(pm.response.status).to.eql(\"Bad Request\");",
							"    });",
							"}",
							"",
							"// ---- Validate Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"pm.test(\"Server header is present\", function () {",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"// Add schema validation to check if the response includes the user-id as a mandatory field",
							"pm.test(\"Response body includes user_id ,user_contact_number as a mandatory field\", function () {",
							"  var schema = {",
							"    type: \"array\",",
							"    items: {",
							"      type: \"object\",",
							"      required: [\"user_id\",\"user_contact_number\"]",
							"    }",
							"  };",
							"  pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define the Username and Password ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Logging for Debugging (Optional) ----",
							"console.log(\"Encoded Credentials: \" + encodedCredentials);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "https:///{{Base_url}}/uap/users",
					"protocol": "https",
					"path": [
						"{{Base_url}}",
						"uap",
						"users"
					]
				},
				"description": "Generated from cURL: curl -X GET \"https://userserviceapp-f5a54828541b.herokuapp.com/uap/users\" -H \"accept: */*\""
			},
			"response": []
		},
		{
			"name": "getById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Validate Status Code ----",
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]); // Check if status is 200 OK or 400 Bad Request",
							"});",
							"",
							"// ---- Validate Status Text ----",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Status line is HTTP/1.1 200 OK\", function () {",
							"        pm.response.to.have.status('OK');",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.test(\"404 Not Found\", function () {",
							"        pm.expect(pm.response.status).to.eql(\"Not Found\");",
							"    });",
							"}",
							"",
							"// ---- Validate Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"pm.test(\"Server header is present\", function () {",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"// ---- JSON Schema Validation for 200 OK ----",
							"if (pm.response.code === 200) {",
							"    const successSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"user_id\": { \"type\": \"integer\" },",
							"            \"user_first_name\": { \"type\": \"string\" },",
							"            \"user_last_name\": { \"type\": \"string\" },",
							"            \"user_contact_number\": { \"type\": \"integer\" },",
							"            \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },",
							"            \"userAddress\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"addressId\": { \"type\": \"integer\" },",
							"                    \"plotNumber\": { \"type\": \"string\" },",
							"                    \"street\": { \"type\": \"string\" },",
							"                    \"state\": { \"type\": \"string\" },",
							"                    \"country\": { \"type\": \"string\" },",
							"                    \"zipCode\": { \"type\": \"integer\" }",
							"                },",
							"                \"required\": [\"addressId\", \"plotNumber\", \"street\", \"state\", \"country\", \"zipCode\"]",
							"            },",
							"            \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"            \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }",
							"        },",
							"        \"required\": [\"user_id\", \"user_first_name\", \"user_last_name\", \"user_contact_number\", \"user_email_id\", \"userAddress\", \"creation_time\", \"last_mod_time\"]",
							"    };",
							"",
							"    pm.test(\"Response matches success schema\", function () {",
							"        pm.response.to.have.jsonSchema(successSchema);",
							"    });",
							"",
							"    // ---- Dynamic Field Validations for 200 OK ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"    // Validate against dynamic data from the collection or environment",
							"    pm.test(\"User ID matches expected\", function () {",
							"        pm.expect(jsonData.user_id).to.eql(pm.iterationData.get(\"user_id\") || pm.environment.get(\"user_id\"));",
							"    });",
							"",
							"",
							"} else if (pm.response.code === 400) {",
							"    // ---- JSON Schema Validation for 400 Bad Request ----",
							"    const errorSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"status\": { \"type\": \"string\" },",
							"            \"message\": { \"type\": \"string\" }",
							"        },",
							"        \"required\": [\"status\", \"message\"]",
							"    };",
							"",
							"    pm.test(\"Response matches error schema\", function () {",
							"        pm.response.to.have.jsonSchema(errorSchema);",
							"    });",
							"",
							"    // ---- Error Message Validation for Bad Request ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"",
							"    // Validate that the correct error message is returned based on the response",
							"pm.test(\"Error message is correct \"+ jsonData.message, function () {",
							"    if (jsonData.message === \"Contact number is already in use by another user\") {",
							"        pm.expect(jsonData.message).to.eql(\"Contact number is already in use by another user\");",
							"    } else if (jsonData.message === \"Street should contain alphabet characters only\") {",
							"        pm.expect(jsonData.message).to.eql(\"Street should contain alphabet characters only\");",
							"    }",
							"    else if (jsonData.message === \"User First Name is mandatory and should contains alphabets only\"){",
							"        pm.expect(jsonData.message).to.eql(\"User First Name is mandatory and should contains alphabets only\");",
							"    }",
							"    else if (jsonData.message === \"Country should contain alphabet characters only\"){",
							"        pm.expect(jsonData.message).to.eql(\"Country should contain alphabet characters only\");",
							"    }",
							"    else if (jsonData.message === \"Internal Server Error\") {",
							"        pm.expect(jsonData.message).to.eql(\"Internal Server Error\");",
							"    }  ",
							"    else {",
							"        pm.expect.fail(\"Unexpected error message: \" + jsonData.message);",
							"    }",
							"});",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define the Username and Password ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Logging for Debugging (Optional) ----",
							"console.log(\"Encoded Credentials: \" + encodedCredentials);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "https://{{Base_url}}/uap/user/{{user_id}}",
					"protocol": "https",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"uap",
						"user",
						"{{user_id}}"
					]
				},
				"description": "Generated from cURL: curl -X GET \"https://userserviceapp-f5a54828541b.herokuapp.com/uap/user/123\" -H \"accept: */*\""
			},
			"response": []
		},
		{
			"name": "update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Validate Status Code ----",
							"pm.test(\"Status code is 200 or 400 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400,404]); // Check if status is 200 OK or 400 Bad Request",
							"});",
							"",
							"// ---- Validate Status Text ----",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Status line is HTTP/1.1 200 OK\", function () {",
							"        pm.response.to.have.status('OK');",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    pm.test(\"Status text contains 404 Not Found\", function () {",
							"        pm.expect(pm.response.status).to.eql(\"Not Found\");",
							"    });",
							"}else if (pm.response.code === 400) {",
							"    pm.test(\"Status text contains BAD REquest\", function () {",
							"        pm.expect(pm.response.status).to.eql(\"Bad Request\");",
							"    });",
							"}",
							"",
							"// ---- Validate Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
							"});",
							"pm.test(\"Server header is present\", function () {",
							"    pm.response.to.have.header(\"Server\");",
							"});",
							"",
							"// ---- JSON Schema Validation for 200 OK ----",
							"if (pm.response.code === 200) {",
							"    const successSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"user_id\": { \"type\": \"integer\" },",
							"            \"user_first_name\": { \"type\": \"string\" },",
							"            \"user_last_name\": { \"type\": \"string\" },",
							"            \"user_contact_number\": { \"type\": \"integer\" },",
							"            \"user_email_id\": { \"type\": \"string\", \"format\": \"email\" },",
							"            \"userAddress\": {",
							"                \"type\": \"object\",",
							"                \"properties\": {",
							"                    \"addressId\": { \"type\": \"integer\" },",
							"                    \"plotNumber\": { \"type\": \"string\" },",
							"                    \"street\": { \"type\": \"string\" },",
							"                    \"state\": { \"type\": \"string\" },",
							"                    \"country\": { \"type\": \"string\" },",
							"                    \"zipCode\": { \"type\": \"integer\" }",
							"                },",
							"                \"required\": [\"addressId\", \"plotNumber\", \"street\", \"state\", \"country\", \"zipCode\"]",
							"            },",
							"            \"creation_time\": { \"type\": \"string\", \"format\": \"date-time\" },",
							"            \"last_mod_time\": { \"type\": \"string\", \"format\": \"date-time\" }",
							"        },",
							"        \"required\": [\"user_id\", \"user_first_name\", \"user_last_name\", \"user_contact_number\", \"user_email_id\", \"userAddress\", \"creation_time\", \"last_mod_time\"]",
							"    };",
							"",
							"    pm.test(\"Response matches success schema\", function () {",
							"        pm.response.to.have.jsonSchema(successSchema);",
							"    });",
							"",
							"    // ---- Dynamic Field Validations for 200 OK ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"    // Validate against dynamic data from the collection or environment",
							"    pm.test(\"User ID matches expected\", function () {",
							"        pm.expect(jsonData.user_id).to.eql(pm.iterationData.get(\"user_id\") || pm.environment.get(\"user_id\"));",
							"    });",
							"",
							"    pm.test(\"First name matches expected\", function () {",
							"        pm.expect(jsonData.user_first_name).to.eql(pm.iterationData.get(\"user_first_name\") || pm.environment.get(\"user_first_name\"));",
							"    });",
							"",
							"    pm.test(\"Last name matches expected\", function () {",
							"        pm.expect(jsonData.user_last_name).to.eql(pm.iterationData.get(\"user_last_name\") || pm.environment.get(\"user_last_name\"));",
							"    });",
							"",
							"    pm.test(\"Email matches expected\", function () {",
							"        pm.expect(jsonData.user_email_id).to.eql(pm.iterationData.get(\"user_email_id\") || pm.environment.get(\"user_email_id\"));",
							"    });",
							"",
							"    pm.test(\"Contact number matches expected\", function () {",
							"        pm.expect(jsonData.user_contact_number).to.eql(pm.iterationData.get(\"user_contact_number\") || pm.environment.get(\"user_contact_number\"));",
							"    });",
							"",
							"    pm.test(\"Address zip code matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.zipCode).to.eql(pm.iterationData.get(\"zipCode\") || pm.environment.get(\"zipCode\"));",
							"    });",
							"",
							"    pm.test(\"Address state matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.state).to.eql(pm.iterationData.get(\"state\") || pm.environment.get(\"state\"));",
							"    });",
							"",
							"    pm.test(\"Country matches expected\", function () {",
							"        pm.expect(jsonData.userAddress.country).to.eql(pm.iterationData.get(\"country\") || pm.environment.get(\"country\"));",
							"    });",
							"",
							"} else if (pm.response.code === 404) {",
							"    // ---- JSON Schema Validation for 400 Bad Request ----",
							"    const errorSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"status\": { \"type\": \"string\" },",
							"            \"message\": { \"type\": \"string\" }",
							"        },",
							"        \"required\": [\"status\", \"message\"]",
							"    };",
							"",
							"    pm.test(\"Response matches error schema\", function () {",
							"        pm.response.to.have.jsonSchema(errorSchema);",
							"    });",
							"",
							"    // ---- Error Message Validation for Bad Request ----",
							"    const jsonData = pm.response.json();",
							"    ",
							"",
							"    // Validate that the correct error message is returned based on the response",
							"pm.test(\"Error message is correct \"+ jsonData.message, function () {",
							"    if (jsonData.message === \"Contact number is already in use by another user\") {",
							"        pm.expect(jsonData.message).to.eql(\"Contact number is already in use by another user\");",
							"    } else if (jsonData.message === \"Street should contain alphabet characters only\") {",
							"        pm.expect(jsonData.message).to.eql(\"Street should contain alphabet characters only\");",
							"    }",
							"    else if (jsonData.message === \"User First Name is mandatory and should contains alphabets only\"){",
							"        pm.expect(jsonData.message).to.eql(\"User First Name is mandatory and should contains alphabets only\");",
							"    }",
							"    else if (jsonData.message === \"Country should contain alphabet characters only\"){",
							"        pm.expect(jsonData.message).to.eql(\"Country should contain alphabet characters only\");",
							"    }else if (jsonData.message === \"Contact number is already in use by another user\"){",
							"        pm.expect(jsonData.message).to.eql(\"Contact number is already in use by another user\");",
							"    }else if (jsonData.message.includes(\"User not found with id:\")) {",
							"        pm.expect(jsonData.message).to.include(\"User not found with id:\"); // Check if message indicates user not found",
							"    }",
							"    else if (jsonData.message === \"Internal Server Error\") {",
							"        pm.expect(jsonData.message).to.eql(\"Internal Server Error\");",
							"    }  ",
							"    else {",
							"        pm.expect.fail(\"Unexpected error message: \" + jsonData.message);",
							"    }",
							"});",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define Username and Password for Authorization ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 for Basic Auth ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Generate Current Timestamp (ISO format) ----",
							"var moment = require('moment');",
							"var currentTime = moment().format('YYYY-MM-DDTHH:mm:ssZ');",
							"pm.environment.set('current_time', currentTime);  // Save it in an environment variable",
							"",
							"// ---- Dynamic Update Data (e.g., updating a user profile) ----",
							"const updatedData = {",
							"    \"user_first_name\": \"UpdatedFirstName\",",
							"    \"user_last_name\": \"UpdatedLastName\",",
							"    \"user_email_id\": \"updatedemail@example.com\",",
							"    \"last_mod_time\": pm.environment.get('current_time')  // Use the current timestamp",
							"};",
							"",
							"// ---- Convert the object to a JSON string and set as an environment variable ----",
							"pm.environment.set('update_request_body', JSON.stringify(updatedData));",
							"",
							"// ---- Logging for Debugging ----",
							"console.log(\"Authorization Header:\", \"Basic \" + encodedCredentials);",
							"console.log(\"Generated Timestamp:\", currentTime);",
							"console.log(\"Update Request Body:\", JSON.stringify(updatedData));",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userAddress\": {\n    \"addressId\": {{addressId}},\n    \"plotNumber\": \"{{plotNumber}}\",\n    \"street\": \"{{street}}\",\n    \"state\": \"{{state}}\",\n    \"country\": \"{{country}}\",\n    \"zipCode\": {{zipCode}}\n  },\n  \"user_id\": {{user_id}},\n  \"user_first_name\": \"{{user_first_name}}\",\n  \"user_last_name\": \"{{user_last_name}}\",\n  \"user_contact_number\": {{user_contact_number}},\n  \"user_email_id\": \"{{user_email_id}}\",\n  \"creation_time\": \"{{creation_time}}\",\n  \"last_mod_time\": \"{{last_mod_time}}\"\n}"
				},
				"url": {
					"raw": "https://{{Base_url}}/uap/updateuser/{{user_id}}",
					"protocol": "https",
					"host": [
						"{{Base_url}}"
					],
					"path": [
						"uap",
						"updateuser",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "byUserFirstName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Test: Status Code ----",
							"pm.test(\"Status code is 200 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400, 404]); // Expect either 200 for success or 400 for error",
							"});",
							"",
							"// ---- Test: Status Line ----",
							"pm.test(\"Status line is correct\", function () {",
							"    if (pm.response.code === 200) {",
							"        pm.response.to.have.status(\"OK\"); // Successful deletion status",
							"    } else if (pm.response.code === 400) {",
							"        pm.response.to.have.status(\"Bad Request\"); // Bad Request in case of failure",
							"    }else if (pm.response.code === 404) {",
							"        pm.response.to.have.status(\"Not Found\"); // Bad Request in case of failure",
							"    }",
							"});",
							"",
							"// ---- Test: Response Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json'); // Expecting JSON response",
							"});",
							"",
							"// ---- Test: Response Schema Validation ----",
							"if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"message\": { \"type\": \"string\" },   // Success message like \"User deleted\"",
							"            \"status\": { \"type\": \"string\" }",
							"        },",
							"        \"required\": [\"message\", \"status\"]",
							"    };",
							"",
							"    pm.test(\"Response schema is valid for 200\", function () {",
							"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    const errorSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"message\": { \"type\": \"string\" },  // Error message",
							"            \"status\": { \"type\": \"string\" },   // Should be \"failure\"",
							"            \"errorCode\": { \"type\": \"string\" } // Optional: error code for further details",
							"        },",
							"        \"required\": [\"message\"]",
							"    };",
							"",
							"    pm.test(\"Response schema is valid for 404\", function () {",
							"        pm.expect(tv4.validate(pm.response.json(), errorSchema)).to.be.true;",
							"    });",
							"}",
							"",
							"// ---- Test: Response Data Validation for 200 Success ----",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"",
							" ",
							"",
							"    pm.test(\"Response contains success message\", function () {",
							"        pm.expect(jsonData.message).to.include(\"deleted\"); // Example message: \"User deleted successfully\"",
							"    });",
							"",
							"    pm.test(\"Status field is success\", function () {",
							"        pm.expect(jsonData.status).to.include(\"Success\"); // Ensure the status is success",
							"    });",
							"}",
							"",
							"// ---- Test: Response Data Validation for 400 Bad Request ----",
							"if (pm.response.code === 404) {",
							"    var errorData = pm.response.json();",
							"",
							"    pm.test(\"Error message is present\" , function () {",
							"        pm.expect(errorData.message).to.be.a(\"string\"); // Ensure the error message exists",
							"    });",
							"",
							"    pm.test(\"Status field is failure\", function () {",
							"        pm.expect(errorData.status).to.eql(\"404 NOT_FOUND\"); // Ensure the status is failure",
							"    });",
							"",
							"   ",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define the Username and Password ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Logging for Debugging (Optional) ----",
							"console.log(\"Encoded Credentials: \" + encodedCredentials);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "https:///{{Base_url}}/uap/deleteuser/username/{{user_first_name}}",
					"protocol": "https",
					"path": [
						"{{Base_url}}",
						"uap",
						"deleteuser",
						"username",
						"{{user_first_name}}"
					]
				},
				"description": "Generated from cURL: curl -X DELETE \"https://userserviceapp-f5a54828541b.herokuapp.com/uap/deleteuser/username/Samyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\" -H \"accept: */*\""
			},
			"response": []
		},
		{
			"name": "byID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ---- Test: Status Code ----",
							"pm.test(\"Status code is 200 or 400\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200,400, 404]); // Expect either 200 for success or 400 for error",
							"});",
							"",
							"// ---- Test: Status Line ----",
							"pm.test(\"Status line is correct\", function () {",
							"    if (pm.response.code === 200) {",
							"        pm.response.to.have.status(\"OK\"); // Successful deletion status",
							"    } else if (pm.response.code === 400) {",
							"        pm.response.to.have.status(\"Bad Request\"); // Bad Request in case of failure",
							"    }else if (pm.response.code === 404) {",
							"        pm.response.to.have.status(\"Not Found\"); // Bad Request in case of failure",
							"    }",
							"});",
							"",
							"// ---- Test: Response Headers ----",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json'); // Expecting JSON response",
							"});",
							"",
							"// ---- Test: Response Schema Validation ----",
							"if (pm.response.code === 200) {",
							"    const schema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"message\": { \"type\": \"string\" },   // Success message like \"User deleted\"",
							"            \"status\": { \"type\": \"string\" }",
							"        },",
							"        \"required\": [\"message\", \"status\"]",
							"    };",
							"",
							"    pm.test(\"Response schema is valid for 200\", function () {",
							"        pm.expect(tv4.validate(pm.response.json(), schema)).to.be.true;",
							"    });",
							"} else if (pm.response.code === 404) {",
							"    const errorSchema = {",
							"        \"type\": \"object\",",
							"        \"properties\": {",
							"            \"message\": { \"type\": \"string\" },  // Error message",
							"            \"status\": { \"type\": \"string\" },   // Should be \"failure\"",
							"            \"errorCode\": { \"type\": \"string\" } // Optional: error code for further details",
							"        },",
							"        \"required\": [\"message\"]",
							"    };",
							"",
							"    pm.test(\"Response schema is valid for 404\", function () {",
							"        pm.expect(tv4.validate(pm.response.json(), errorSchema)).to.be.true;",
							"    });",
							"}",
							"",
							"// ---- Test: Response Data Validation for 200 Success ----",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"",
							" ",
							"",
							"    pm.test(\"Response contains success message\", function () {",
							"        pm.expect(jsonData.message).to.include(\"deleted\"); // Example message: \"User deleted successfully\"",
							"    });",
							"",
							"    pm.test(\"Status field is success\", function () {",
							"        pm.expect(jsonData.status).to.include(\"Success\"); // Ensure the status is success",
							"    });",
							"}",
							"",
							"// ---- Test: Response Data Validation for 400 Bad Request ----",
							"if (pm.response.code === 404) {",
							"    var errorData = pm.response.json();",
							"",
							"    pm.test(\"Error message is present\" , function () {",
							"        pm.expect(errorData.message).to.be.a(\"string\"); // Ensure the error message exists",
							"    });",
							"",
							"    pm.test(\"Status field is failure\", function () {",
							"        pm.expect(errorData.status).to.eql(\"404 NOT_FOUND\"); // Ensure the status is failure",
							"    });",
							"",
							"   ",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ---- Define the Username and Password ----",
							"var username = \"your_username\";  // Replace with your actual username",
							"var password = \"your_password\";  // Replace with your actual password",
							"",
							"// ---- Encode Credentials to Base64 ----",
							"var encodedCredentials = btoa(username + \":\" + password);",
							"",
							"// ---- Set Authorization Header ----",
							"pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Basic \" + encodedCredentials",
							"});",
							"",
							"// ---- Logging for Debugging (Optional) ----",
							"console.log(\"Encoded Credentials: \" + encodedCredentials);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "https:///{{Base_url}}/uap/deleteuser/{{user_id}}",
					"protocol": "https",
					"path": [
						"{{Base_url}}",
						"uap",
						"deleteuser",
						"{{user_id}}"
					]
				},
				"description": "Generated from cURL: curl -X DELETE \"https://userserviceapp-f5a54828541b.herokuapp.com/uap/deleteuser/123\" -H \"accept: */*\""
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "userapi@october",
				"type": "string"
			},
			{
				"key": "username",
				"value": "Numpy@gmail.com",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}